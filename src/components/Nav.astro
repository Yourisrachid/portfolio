<nav class="sticky top-0 z-50 w-full bg-gray-800 text-white py-2 opacity-85">
  <div class="container mx-auto flex justify-center md:justify-end items-center px-4 md:px-10">
    <div class="space-x-4 md:space-x-6 flex">
      <a id="nav-home" href="/#" class="hover:text-orange-400 transition duration-300 ease-in-out px-2 md:px-4 py-2">
        Home
      </a>
      <a id="nav-about" href="/#about" class="hover:text-orange-400 transition duration-300 ease-in-out px-2 md:px-4 py-2">
        About Me
      </a>
      <a id="nav-projects" href="/#projects" class="hover:text-orange-400 transition duration-300 ease-in-out px-2 md:px-4 py-2">
        Projects
      </a>
      <a id="nav-contact" href="/#contact" class="hover:text-orange-400 transition duration-300 ease-in-out px-2 md:px-4 py-2">
        Contact
      </a>
    </div>
  </div>
</nav>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const sections: Record<string, HTMLElement | null> = {
      home: document.querySelector('#me'),
      about: document.querySelector('#about'),
      projects: document.querySelector('#projects'),
      contact: document.querySelector('#contact'),
    };

    const navLinks: Record<string, HTMLElement | null> = {
      home: document.getElementById('nav-home'),
      about: document.getElementById('nav-about'),
      projects: document.getElementById('nav-projects'),
      contact: document.getElementById('nav-contact'),
    };

    const options = {
      threshold: 0.5,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          for (const link in navLinks) {
            const linkElement = navLinks[link];
            if (linkElement) {
              linkElement.classList.remove('text-[#49d1ba]');
            }
          }
          const activeLink = navLinks[sectionId];
          if (activeLink) {
            activeLink.classList.add('text-[#49d1ba]');
          }
        }
      });
    }, options);

    for (const section in sections) {
      const sectionElement = sections[section];
      if (sectionElement) {
        observer.observe(sectionElement);
      }
    }
  });
</script>

